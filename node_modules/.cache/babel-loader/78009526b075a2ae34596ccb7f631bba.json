{"ast":null,"code":"import _slicedToArray from \"/Users/jgdharb/DevProjects/rocketSeat/bootcamp/reactjs-demo/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"/Users/jgdharb/DevProjects/rocketSeat/bootcamp/reactjs-demo/src/pages/Repository/index.js\";\nimport React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport api from '../../services/api'; // import { Container } from './styles';\n\nexport default class Repository extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      repository: {},\n      issues: [],\n      loading: true\n    };\n  }\n\n  async componentDidMount() {\n    const match = this.props.match;\n    const repoName = decodeURIComponent(match.params.repository);\n\n    const _ref = await Promise.all([api.get(\"/repos/\".concat(repoName)), api.get(\"/repos/\".concat(repoName, \"/issues\"), {\n      params: {\n        state: 'open',\n        per_page: 5\n      }\n    })]),\n          _ref2 = _slicedToArray(_ref, 2),\n          repository = _ref2[0],\n          issues = _ref2[1];\n\n    this.setState({\n      repository: repository.data,\n      issues: issues.data,\n      loading: false\n    });\n  }\n\n  render() {\n    const _this$state = this.state,\n          repository = _this$state.repository,\n          issues = _this$state.issues,\n          loading = _this$state.loading;\n    return React.createElement(\"h1\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 46\n      },\n      __self: this\n    }, \"Repository: \");\n  }\n\n}\nRepository.propTypes = {\n  match: PropTypes.shape({\n    params: PropTypes.shape({\n      repository: String\n    })\n  }).isRequired\n};","map":{"version":3,"sources":["/Users/jgdharb/DevProjects/rocketSeat/bootcamp/reactjs-demo/src/pages/Repository/index.js"],"names":["React","Component","PropTypes","api","Repository","state","repository","issues","loading","componentDidMount","match","props","repoName","decodeURIComponent","params","Promise","all","get","per_page","setState","data","render","propTypes","shape","String","isRequired"],"mappings":";;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,OAAOC,SAAP,MAAsB,YAAtB;AACA,OAAOC,GAAP,MAAgB,oBAAhB,C,CAEA;;AAEA,eAAe,MAAMC,UAAN,SAAyBH,SAAzB,CAAmC;AAAA;AAAA;AAAA,SAShDI,KATgD,GASxC;AACNC,MAAAA,UAAU,EAAE,EADN;AAENC,MAAAA,MAAM,EAAE,EAFF;AAGNC,MAAAA,OAAO,EAAE;AAHH,KATwC;AAAA;;AAehD,QAAMC,iBAAN,GAA0B;AAAA,UAChBC,KADgB,GACN,KAAKC,KADC,CAChBD,KADgB;AAGxB,UAAME,QAAQ,GAAGC,kBAAkB,CAACH,KAAK,CAACI,MAAN,CAAaR,UAAd,CAAnC;;AAHwB,iBAKK,MAAMS,OAAO,CAACC,GAAR,CAAY,CAC7Cb,GAAG,CAACc,GAAJ,kBAAkBL,QAAlB,EAD6C,EAE7CT,GAAG,CAACc,GAAJ,kBAAkBL,QAAlB,cAAqC;AACnCE,MAAAA,MAAM,EAAE;AACNT,QAAAA,KAAK,EAAE,MADD;AAENa,QAAAA,QAAQ,EAAE;AAFJ;AAD2B,KAArC,CAF6C,CAAZ,CALX;AAAA;AAAA,UAKjBZ,UALiB;AAAA,UAKLC,MALK;;AAexB,SAAKY,QAAL,CAAc;AACZb,MAAAA,UAAU,EAAEA,UAAU,CAACc,IADX;AAEZb,MAAAA,MAAM,EAAEA,MAAM,CAACa,IAFH;AAGZZ,MAAAA,OAAO,EAAE;AAHG,KAAd;AAKD;;AAEDa,EAAAA,MAAM,GAAG;AAAA,wBACiC,KAAKhB,KADtC;AAAA,UACCC,UADD,eACCA,UADD;AAAA,UACaC,MADb,eACaA,MADb;AAAA,UACqBC,OADrB,eACqBA,OADrB;AAEP,WAAO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sBAAP;AACD;;AAxC+C;AAA7BJ,U,CACZkB,S,GAAY;AACjBZ,EAAAA,KAAK,EAAER,SAAS,CAACqB,KAAV,CAAgB;AACrBT,IAAAA,MAAM,EAAEZ,SAAS,CAACqB,KAAV,CAAgB;AACtBjB,MAAAA,UAAU,EAAEkB;AADU,KAAhB;AADa,GAAhB,EAIJC;AALc,C","sourcesContent":["import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport api from '../../services/api';\n\n// import { Container } from './styles';\n\nexport default class Repository extends Component {\n  static propTypes = {\n    match: PropTypes.shape({\n      params: PropTypes.shape({\n        repository: String,\n      }),\n    }).isRequired,\n  };\n\n  state = {\n    repository: {},\n    issues: [],\n    loading: true,\n  };\n\n  async componentDidMount() {\n    const { match } = this.props;\n\n    const repoName = decodeURIComponent(match.params.repository);\n\n    const [repository, issues] = await Promise.all([\n      api.get(`/repos/${repoName}`),\n      api.get(`/repos/${repoName}/issues`, {\n        params: {\n          state: 'open',\n          per_page: 5,\n        },\n      }),\n    ]);\n\n    this.setState({\n      repository: repository.data,\n      issues: issues.data,\n      loading: false,\n    });\n  }\n\n  render() {\n    const { repository, issues, loading } = this.state;\n    return <h1>Repository: </h1>;\n  }\n}\n"]},"metadata":{},"sourceType":"module"}