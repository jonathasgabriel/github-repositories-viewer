{"ast":null,"code":"var _jsxFileName = \"/Users/jgdharb/DevProjects/rocketSeat/bootcamp/github-repositories-viewer/src/pages/Main/index.js\";\nimport React, { Component } from 'react';\nimport { FaGithubAlt, FaPlus, FaSpinner } from 'react-icons/fa';\nimport { Link } from 'react-router-dom';\nimport Container from '../../components/Container';\nimport SubmitButton from '../../components/SubmitButton';\nimport api from '../../services/api';\nimport { Form, List, Input } from './styles';\nexport default class Main extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      newRepo: '',\n      repositories: [],\n      loading: false,\n      error: false\n    };\n\n    this.handleInputChange = e => {\n      this.setState({\n        newRepo: e.target.value\n      });\n    };\n\n    this.handleSubmit = async e => {\n      e.preventDefault();\n\n      try {\n        this.setState({\n          loading: true\n        });\n        const _this$state = this.state,\n              newRepo = _this$state.newRepo,\n              repositories = _this$state.repositories;\n        const foundRepository = repositories.filter(repo => repo.name === newRepo);\n\n        if (foundRepository.length > 0) {\n          throw new Error('Duplicated repository');\n        }\n\n        const response = await api.get(\"/repos/\".concat(newRepo));\n        const data = {\n          name: response.data.full_name\n        };\n        this.setState({\n          repositories: [...repositories, data],\n          newRepo: '',\n          loading: false,\n          error: false\n        });\n      } catch (err) {\n        this.setState({\n          loading: false,\n          error: true\n        });\n      }\n    };\n  }\n\n  // load data from local storage\n  componentDidMount() {\n    const repositories = localStorage.getItem('repositories');\n\n    if (repositories) {\n      this.setState({\n        repositories: JSON.parse(repositories)\n      });\n    }\n  } // save data to localstorage\n\n\n  componentDidUpdate(_, prevState) {\n    const repositories = this.state.repositories;\n\n    if (prevState.repositories !== repositories) {\n      localStorage.setItem('repositories', JSON.stringify(repositories));\n    }\n  }\n\n  render() {\n    const _this$state2 = this.state,\n          newRepo = _this$state2.newRepo,\n          loading = _this$state2.loading,\n          repositories = _this$state2.repositories,\n          error = _this$state2.error;\n    console.log(error);\n    return React.createElement(Container, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 83\n      },\n      __self: this\n    }, React.createElement(\"h1\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 84\n      },\n      __self: this\n    }, React.createElement(FaGithubAlt, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 85\n      },\n      __self: this\n    }), \"Repositories\"), React.createElement(Form, {\n      onSubmit: this.handleSubmit,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 89\n      },\n      __self: this\n    }, React.createElement(Input, {\n      error: error,\n      type: \"text\",\n      placeholder: \"Add repository\",\n      value: newRepo,\n      onChange: this.handleInputChange,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 90\n      },\n      __self: this\n    }), React.createElement(SubmitButton, {\n      loading: loading,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 97\n      },\n      __self: this\n    }, loading ? React.createElement(FaSpinner, {\n      color: \"#FFF\",\n      size: 14,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 99\n      },\n      __self: this\n    }) : React.createElement(FaPlus, {\n      color: \"#FFF\",\n      size: 14,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 101\n      },\n      __self: this\n    }))), React.createElement(List, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 106\n      },\n      __self: this\n    }, repositories.map(repository => React.createElement(\"li\", {\n      key: repository.name,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 108\n      },\n      __self: this\n    }, React.createElement(\"span\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 109\n      },\n      __self: this\n    }, repository.name), React.createElement(Link, {\n      to: \"/repository/\".concat(encodeURIComponent(repository.name)),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 110\n      },\n      __self: this\n    }, \"Details\")))));\n  }\n\n}","map":{"version":3,"sources":["/Users/jgdharb/DevProjects/rocketSeat/bootcamp/github-repositories-viewer/src/pages/Main/index.js"],"names":["React","Component","FaGithubAlt","FaPlus","FaSpinner","Link","Container","SubmitButton","api","Form","List","Input","Main","state","newRepo","repositories","loading","error","handleInputChange","e","setState","target","value","handleSubmit","preventDefault","foundRepository","filter","repo","name","length","Error","response","get","data","full_name","err","componentDidMount","localStorage","getItem","JSON","parse","componentDidUpdate","_","prevState","setItem","stringify","render","console","log","map","repository","encodeURIComponent"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport { FaGithubAlt, FaPlus, FaSpinner } from 'react-icons/fa';\nimport { Link } from 'react-router-dom';\nimport Container from '../../components/Container';\nimport SubmitButton from '../../components/SubmitButton';\n\nimport api from '../../services/api';\n\nimport { Form, List, Input } from './styles';\n\nexport default class Main extends Component {\n  state = {\n    newRepo: '',\n    repositories: [],\n    loading: false,\n    error: false,\n  };\n\n  // load data from local storage\n  componentDidMount() {\n    const repositories = localStorage.getItem('repositories');\n\n    if (repositories) {\n      this.setState({\n        repositories: JSON.parse(repositories),\n      });\n    }\n  }\n\n  // save data to localstorage\n  componentDidUpdate(_, prevState) {\n    const { repositories } = this.state;\n\n    if (prevState.repositories !== repositories) {\n      localStorage.setItem('repositories', JSON.stringify(repositories));\n    }\n  }\n\n  handleInputChange = e => {\n    this.setState({ newRepo: e.target.value });\n  };\n\n  handleSubmit = async e => {\n    e.preventDefault();\n\n    try {\n      this.setState({ loading: true });\n\n      const { newRepo, repositories } = this.state;\n\n      const foundRepository = repositories.filter(\n        repo => repo.name === newRepo\n      );\n\n      if (foundRepository.length > 0) {\n        throw new Error('Duplicated repository');\n      }\n\n      const response = await api.get(`/repos/${newRepo}`);\n\n      const data = {\n        name: response.data.full_name,\n      };\n\n      this.setState({\n        repositories: [...repositories, data],\n        newRepo: '',\n        loading: false,\n        error: false,\n      });\n    } catch (err) {\n      this.setState({\n        loading: false,\n        error: true,\n      });\n    }\n  };\n\n  render() {\n    const { newRepo, loading, repositories, error } = this.state;\n    console.log(error);\n    return (\n      <Container>\n        <h1>\n          <FaGithubAlt />\n          Repositories\n        </h1>\n\n        <Form onSubmit={this.handleSubmit}>\n          <Input\n            error={error}\n            type=\"text\"\n            placeholder=\"Add repository\"\n            value={newRepo}\n            onChange={this.handleInputChange}\n          />\n          <SubmitButton loading={loading}>\n            {loading ? (\n              <FaSpinner color=\"#FFF\" size={14} />\n            ) : (\n              <FaPlus color=\"#FFF\" size={14} />\n            )}\n          </SubmitButton>\n        </Form>\n\n        <List>\n          {repositories.map(repository => (\n            <li key={repository.name}>\n              <span>{repository.name}</span>\n              <Link to={`/repository/${encodeURIComponent(repository.name)}`}>\n                Details\n              </Link>\n            </li>\n          ))}\n        </List>\n      </Container>\n    );\n  }\n}\n"]},"metadata":{},"sourceType":"module"}